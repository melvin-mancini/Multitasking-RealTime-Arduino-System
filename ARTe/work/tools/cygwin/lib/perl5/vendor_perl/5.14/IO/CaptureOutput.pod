# Generated by Pod::WikiDoc version 0.18

=pod


=head1 NAME

IO::CaptureOutput - capture STDOUT and STDERR from Perl code, subprocesses or XS

=head1 VERSION

This documentation describes version 1.1102.

=head1 SYNOPSIS

     use IO::CaptureOutput qw(capture qxx qxy);
 
     # STDOUT and STDERR separately
     capture { noisy_sub(@args) } \$stdout, \$stderr;
 
     # STDOUT and STDERR together
     capture { noisy_sub(@args) } \$combined, \$combined;
 
     # STDOUT and STDERR from external command
     ($stdout, $stderr, $success) = qxx( @cmd );
 
     # STDOUT and STDERR together from external command
     ($combined, $success) = qxy( @cmd );

=head1 DESCRIPTION

This module provides routines for capturing STDOUT and STDERR from perl 
subroutines, forked system calls (e.g. C<<< system() >>>, C<<< fork() >>>) and from 
XS or C modules.

=head1 FUNCTIONS

The following functions will be exported on demand.

=head2 capture()

     capture \&subroutine, \$stdout, \$stderr;

Captures everything printed to C<<< STDOUT >>> and C<<< STDERR >>> for the duration of
C<<< &subroutine >>>. C<<< $stdout >>> and C<<< $stderr >>> are optional scalars that will contain
C<<< STDOUT >>> and C<<< STDERR >>> respectively. 

C<<< capture() >>> uses a code prototype so the first argument can be specified directly within 
brackets if desired.

     # shorthand with prototype
     capture { print __PACKAGE__ } \$stdout, \$stderr;

Returns the return value(s) of C<<< &subroutine >>>. The sub is called in the same
context as C<<< capture() >>> was called e.g.:

     @rv = capture { wantarray } ; # returns true
     $rv = capture { wantarray } ; # returns defined, but not true
     capture { wantarray };       # void, returns undef

C<<< capture() >>> is able to capture output from subprocesses and C code, which
traditional C<<< tie() >>> methods of output capture are unable to do.

B<Note:> C<<< capture() >>> will only capture output that has been written or flushed
to the filehandle.

If the two scalar references refer to the same scalar, then C<<< STDERR >>> will be
merged to C<<< STDOUT >>> before capturing and the scalar will hold the combined
output of both.

     capture \&subroutine, \$combined, \$combined;

Normally, C<<< capture() >>> uses anonymous, temporary files for capturing output.
If desired, specific file names may be provided instead as additional options.

     capture \&subroutine, \$stdout, \$stderr, $out_file, $err_file;

Files provided will be clobbered, overwriting any previous data, but
will persist after the call to C<<< capture() >>> for inspection or other manipulation.

By default, when no references are provided to hold STDOUT or STDERR, output
is captured and silently discarded.

     # Capture STDOUT, discard STDERR
     capture \&subroutine, \$stdout;
 
     # Discard STDOUT, capture STDERR
     capture \&subroutine, undef, \$stderr;

However, even when using C<<< undef >>>, output can be captured to specific files.

     # Capture STDOUT to a specific file, discard STDERR
     capture \&subroutine, \$stdout, undef, $outfile;
 
     # Discard STDOUT, capture STDERR to a specific file
     capture \&subroutine, undef, \$stderr, undef, $err_file;
 
     # Discard both, capture merged output to a specific file
     capture \&subroutine, undef, undef, $mergedfile;

It is a fatal error to merge STDOUT and STDERR and request separate, specific
files for capture.

     # ERROR:
     capture \&subroutine, \$stdout, \$stdout, $out_file, $err_file;
     capture \&subroutine, undef, undef, $out_file, $err_file;

If either STDOUT or STDERR should be passed through to the terminal instead of
captured, provide a reference to undef -- C<<< \undef >>> -- instead of a capture
variable.

     # Capture STDOUT, display STDERR
     capture \&subroutine, \$stdout, \undef;
 
     # Display STDOUT, capture STDERR
     capture \&subroutine, \undef, \$stderr;

=head2 capture_exec()

     ($stdout, $stderr, $success, $exit_code) = capture_exec(@args);

Captures and returns the output from C<<< system(@args) >>>. In scalar context,
C<<< capture_exec() >>> will return what was printed to C<<< STDOUT >>>. In list context,
it returns what was printed to C<<< STDOUT >>> and C<<< STDERR >>> as well as a success
flag and the exit value.

     $stdout = capture_exec('perl', '-e', 'print "hello world"');
 
     ($stdout, $stderr, $success, $exit_code) = 
         capture_exec('perl', '-e', 'warn "Test"');

C<<< capture_exec >>> passes its arguments to C<<< system() >>> and on MSWin32 will protect
arguments with shell quotes if necessary.  This makes it a handy and slightly
more portable alternative to backticks, piped C<<< open() >>> and C<<< IPC::Open3 >>>.

The C<<< $success >>> flag returned will be true if the command ran successfully and
false if it did not (if the command could not be run or if it ran and
returned a non-zero exit value).  On failure, the raw exit value of the
C<<< system() >>> call is available both in the C<<< $exit_code >>> returned and in the C<<< $? >>>
variable.

   ($stdout, $stderr, $success, $exit_code) = 
       capture_exec('perl', '-e', 'warn "Test" and exit 1');
 
   if ( ! $success ) {
       print "The exit code was " . ($exit_code >> 8) . "\n";
   }

See L<perlvar> for more information on interpreting a child process
exit code.

=head2 capture_exec_combined()

     ($combined, $success, $exit_code) = capture_exec_combined(
         'perl', '-e', 'print "hello\n"', 'warn "Test\n"
     );

This is just like C<<< capture_exec() >>>, except that it merges C<<< STDERR >>> with C<<< STDOUT >>>
before capturing output.

B<Note:> there is no guarantee that text printed to C<<< STDOUT >>> and C<<< STDERR >>> in the
subprocess will be appear in order. The actual order will depend on how IO
buffering is handled in the subprocess.

=head2 qxx()

This is an alias for C<<< capture_exec() >>>.

=head2 qxy()

This is an alias for C<<< capture_exec_combined() >>>.

=head1 SEE ALSO

=over

=item *

L<IPC::Open3>

=item *

L<IO::Capture>

=item *

L<IO::Utils>

=item *

L<IPC::System::Simple>

=back

=head1 AUTHORS

=over

=item *

Simon Flack E<lt>simonflk _AT_ cpan.orgE<gt> (original author)

=item *

David Golden E<lt>dagolden _AT_ cpan.orgE<gt> (co-maintainer since version 1.04)

=back

=head1 COPYRIGHT AND LICENSE

Portions copyright 2004, 2005 Simon Flack.  Portions copyright 2007, 2008 David
Golden.  All rights reserved.

You may distribute under the terms of either the GNU General Public License or
the Artistic License, as specified in the Perl README file.


